{% raw %}
frontend HTTP
    option http-use-htx
{{- range $dummyidx, $ip := .IPs }}
    bind     {{ $ip }}:80
{{- end }}
    reqadd X-Forwarded-Proto:\ http
    reqadd X-Forwarded-Port:\ 80
    option forwardfor
    http-request add-header X-CLIENT-IP %[src]
{% endraw %}
    reqadd X-Kubernauts-Via:\ {{ ansible_fqdn }}
{% raw %}

{{ range $cert, $details := .SniList }}
{{- range $dummyidx, $domain := $details.Domains }}
    acl      acl-http-{{ $domain }} hdr(host) -i {{ $domain }}
    use_backend backend-{{ index $.HostToBackend $domain }}-http1 if acl-http-{{ $domain }}
{{- end }}
{{- end }}
    acl      acl-regharbor hdr(host) -i registry.vis.ethz.ch
    use_backend regharbor if acl-regharbor
    acl      acl-rgw hdr(host) -i rgw.vis.ethz.ch
    use_backend rgw if acl-rgw

    default_backend tectonic-bridge-http

{% endraw %}
{# Preliminary HTTPS handler - needed to split out the kubernetes API
   as it uses client certificates #}
{% raw %}
frontend HTTPS
{{- range $dummyidx, $ip := .IPs }}
    bind     {{ $ip }}:443
{{- end }}

    mode     tcp
    option   tcplog
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
{% endraw %}
{% for item in k8router_apiserver_hostname %}
    acl      acl-k8s-apiserver-{{ loop.index }} req_ssl_sni -i -m str {{ item }}
    use_backend kube-apiserver if acl-k8s-apiserver-{{ loop.index }}
{% endfor %}
{% raw %}
    # We also need to pass through the old kubernetes API (or deployment wont work)
    acl      acl-k8s-tectonic-api req_ssl_sni -i -m str kube-api.vis.ethz.ch
    use_backend K8S if acl-k8s-tectonic-api
    # ...and the Tectonic backend as it hardcodes the CA in it's kubeconfig
    acl      acl-k8s-tectonic req_ssl_sni -i -m str kube.vis.ethz.ch
    use_backend TConsole if acl-k8s-tectonic
    # No tectonic here - moved _behind_ the decrypt!
    default_backend wrap-backend-https

backend tectonic-bridge-http
    mode http
    server loopback 127.0.0.1:10920 send-proxy-v2

backend tectonic-bridge-https
    mode http
    server loopback 127.0.0.1:10921 send-proxy-v2 ssl verify none

{% endraw %}
{# Main HTTPS handler #}
{% raw %}
backend wrap-backend-https
    mode     tcp
    server   loopback  127.0.0.1:12345 send-proxy-v2

frontend wrap-frontend-https
    mode     http
    option http-use-htx
    bind     127.0.0.1:12345 {{ range $cert, $details := .SniList }} crt {{ $details.Path }}{{ end }} ssl accept-proxy alpn h2,http/1.1
    # Disabled for now: allow-0rtt

    http-request set-header X-Kubernauts-ALPN %[ssl_fc_alpn]
    http-request set-header X-Kubernauts-HTTP %[req.ver]
    http-request set-header X-Kubernauts-TLSVersion %[ssl_fc_protocol]
    http-request set-header X-Kubernauts-TLSCipher %[ssl_fc_cipher]
    http-request set-header X-Kubernauts-TLS13Early %[ssl_fc_has_early]
    http-request add-header X-CLIENT-IP %[src]
    reqadd X-Forwarded-Proto:\ https
    reqadd X-Forwarded-Port:\ 443
    option forwardfor
{% endraw %}
    reqadd X-Kubernauts-Edge:\ {{ ansible_fqdn }}
{% raw %}

    http-request deny if !METH_GET { ssl_fc_has_early }

{{ range $cert, $details := .SniList }}
{{- range $dummyidx, $domain := $details.Domains }}
    acl      acl-https-{{ $domain }} hdr(host) -i {{ $domain }}
    use_backend backend-{{ index $.HostToBackend $domain }}-http1 if acl-https-{{ $domain }} !{ ssl_fc_alpn -i h2 }
    use_backend backend-{{ index $.HostToBackend $domain }}-http2 if acl-https-{{ $domain }} { ssl_fc_alpn -i h2 }
{{ end }}
{{- end }}
    acl      acl-regharbor hdr(host) -i -m str registry.vis.ethz.ch
    use_backend k8s-ssl-regharbor if acl-regharbor
    acl      acl-rgw hdr(host) -i -m str rgw.vis.ethz.ch
    use_backend k8s-ssl-rgw if acl-rgw

    default_backend tectonic-bridge-https


{% endraw %}
{# Backends #}
{% raw %}
{{ range $backend, $details := .BackendCombinationList }}
backend backend-{{ $backend }}-http1
    mode     http
    balance  source
    hash-type consistent
    option http-use-htx
    http-reuse always

{{- range $i, $server := index $.BackendCombinationList $backend }}
    server   server-{{ $server.Name }}-{{ $i }} {{ $server.IP }}:80 check send-proxy
{{- end }}

backend backend-{{ $backend }}-http2
    mode     http
    balance  source
    hash-type consistent
    option http-use-htx
    http-reuse never

{{- range $i, $server := index $.BackendCombinationList $backend }}
    server   server-{{ $server.Name }}-{{ $i }} {{ $server.IP }}:81 check send-proxy proto h2
{{- end }}
{{- end }}
{% endraw %}

{# Legacy hosts, but in HTTP instead of TCP mode #}
backend k8s-ssl-regharbor
    balance source
    hash-type consistent
    stick-table type ip size 20k peers tcrouter_rep
    stick on src
    option httpchk GET / HTTP/1.1\r\nHost:\ registry.vis.ethz.ch
    server   registry 10.233.42.80:444 send-proxy ssl sni str(registry.vis.ethz.ch) verify none check

backend k8s-ssl-rgw
    balance source
    hash-type consistent
    stick-table type ip size 20k peers tcrouter_rep
    stick on src
    option httpchk GET / HTTP/1.1\r\nHost:\ rgw.vis.ethz.ch
    server   rgw-1 10.233.42.67:443  ssl sni str(rgw.vis.ethz.ch) verify none check
    server   rgw-2 10.233.42.68:443  ssl sni str(rgw.vis.ethz.ch) verify none check
