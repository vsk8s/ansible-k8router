{% raw %}
frontend HTTP
    option http-use-htx
{{- range $dummyidx, $ip := .IPs }}
    bind     {{ $ip }}:80
{{- end }}
    reqadd X-Forwarded-Proto:\ http
    reqadd X-Forwarded-Port:\ 80
    option forwardfor
    http-request add-header X-CLIENT-IP %[src]
{% endraw %}
    reqadd X-Kubernauts-Via:\ {{ ansible_fqdn }}
{% raw %}

{{ range $cert, $details := .SniList }}
{{- range $dummyidx, $domain := $details.Domains }}
    acl      acl-http-{{ $domain }} hdr_reg(host) -i ^{{ replace $domain "." "\\." }}(:80)?$
    use_backend backend-{{ index $.HostToBackend $domain }}-http1 if acl-http-{{ $domain }}
{{- end }}
{{- end }}
    acl      acl-rgw hdr(host) -i rgw.vis.ethz.ch
    use_backend rgw if acl-rgw

{% endraw %}
{# Preliminary HTTPS handler - needed to split out the kubernetes API
   as it uses client certificates #}
{% raw %}
frontend HTTPS
{{- range $dummyidx, $ip := .IPs }}
    bind     {{ $ip }}:443
{{- end }}

    mode     tcp
    option   tcplog
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
{% endraw %}
{% for cluster in k8router_clusters %}
{% for item in cluster.apiserver_hostname %}
    acl      acl-k8s-apiserver-{{ item | replace('.', '-') }} req_ssl_sni -i -m str {{ item }}
    use_backend kube-apiserver-{{ cluster.name }} if acl-k8s-apiserver-{{ item | replace('.', '-') }}
{% endfor %}
{% endfor %}
{% raw %}
    default_backend wrap-backend-https

{% endraw %}
{# Main HTTPS handler #}
{% raw %}
backend wrap-backend-https
    mode     tcp
    server   loopback  127.0.0.1:12345 send-proxy-v2

frontend wrap-frontend-https
    mode     http
    option http-use-htx
    bind     127.0.0.1:12345 {{ range $cert, $details := .SniList }} crt {{ $details.Path }}{{ end }} ssl accept-proxy alpn h2,http/1.1
    # Disabled for now: allow-0rtt

    http-request set-header X-Kubernauts-ALPN %[ssl_fc_alpn]
    http-request set-header X-Kubernauts-HTTP %[req.ver]
    http-request set-header X-Kubernauts-TLSVersion %[ssl_fc_protocol]
    http-request set-header X-Kubernauts-TLSCipher %[ssl_fc_cipher]
    http-request set-header X-Kubernauts-TLS13Early %[ssl_fc_has_early]
    http-request add-header X-CLIENT-IP %[src]
    reqadd X-Forwarded-Proto:\ https
    reqadd X-Forwarded-Port:\ 443
    option forwardfor
{% endraw %}
    reqadd X-Kubernauts-Edge:\ {{ ansible_fqdn }}
{% raw %}

    http-request deny if !METH_GET { ssl_fc_has_early }

{{ range $cert, $details := .SniList }}
{{- range $dummyidx, $domain := $details.Domains }}
    acl      acl-https-{{ $domain }} hdr_reg(host) -i ^{{ replace $domain "." "\\." }}(:443)?$
    use_backend backend-{{ index $.HostToBackend $domain }}-http1 if acl-https-{{ $domain }} !{ ssl_fc_alpn -i h2 }
    use_backend backend-{{ index $.HostToBackend $domain }}-http2 if acl-https-{{ $domain }} { ssl_fc_alpn -i h2 }
{{ end }}
{{- end }}
    acl      acl-rgw hdr(host) -i -m str rgw.vis.ethz.ch
    use_backend k8s-ssl-rgw if acl-rgw

{% endraw %}
{# Backends #}
{% raw %}
{{ range $backend, $details := .BackendCombinationList }}
backend backend-{{ $backend }}-http1
    mode     http
    balance  source
    hash-type consistent
    option http-use-htx
    http-reuse always

{{- range $i, $server := index $.BackendCombinationList $backend }}
    server   server-{{ $server.Name }}-{{ $i }} {{ $server.IP }}:80 check send-proxy
{{- end }}

backend backend-{{ $backend }}-http2
    mode     http
    balance  source
    hash-type consistent
    option http-use-htx
    http-reuse never

{{- range $i, $server := index $.BackendCombinationList $backend }}
    server   server-{{ $server.Name }}-{{ $i }} {{ $server.IP }}:81 check send-proxy proto h2
{{- end }}
{{- end }}
{% endraw %}

